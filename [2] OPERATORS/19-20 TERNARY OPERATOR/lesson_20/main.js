// Тернарный оператор в JavaScript, также известный как условный (ternary)
// оператор, позволяет выполнить простое условие в одной строке. Это
// единственный оператор в JavaScript, который принимает три операнда.
// Тернарный оператор является сокращением для конструкции if-else и
// используется для присвоения переменной значения на основе условия.

// Синтаксис

condition ? expressionIfTrue : expressionIfFalse

// - condition: Условие, которое будет проверяться. Если условие истинно (true),
//   выполняется expressionIfTrue. Если условие ложно (false), выполняется expressionIfFalse.
// - expressionIfTrue: Выражение, которое выполняется, если условие истинно.
// - expressionIfFalse: Выражение, которое выполняется, если условие ложно.


// 1. Присвоение значения на основе условия:
   let age = 18;
   let canVote = age >= 18 ? 'Yes' : 'No';
   console.log(canVote); // Вывод: 'Yes'

// 2. Использование в функции:

   function getFee(isMember) {
       return isMember ? '$2.00' : '$10.00';
   }
   console.log(getFee(true));  // Вывод: '$2.00'
   console.log(getFee(false)); // Вывод: '$10.00'

// 3. Вложенные тернарные операторы:
// Тернарные операторы можно вкладывать друг в друга, но это может ухудшить читаемость кода.

   let score = 85;
   let grade = score > 90 ? 'A' : score > 80 ? 'B' : 'C';
   console.log(grade); // Вывод: 'B'

// Важные аспекты
//
// 1. Читаемость кода:
//     Хотя тернарный оператор позволяет сократить количество
//     строк кода, его чрезмерное использование или вложенные
//     тернарные операторы могут сделать код менее читаемым.
//     В таких случаях лучше использовать конструкцию if-else.
//
// 2. Возвращаемые значения:
//     Тернарный оператор возвращает значение, которое можно
//     присвоить переменной или использовать непосредственно
//     в выражении.
//
// 3. Типы данных:
//     Тернарный оператор может работать с любыми типами данных.
//     Например, можно использовать его для выбора между
//     строками, числами, объектами и функциями.


// Пример с использованием тернарного оператора:

let isEven = num % 2 === 0 ? 'Even' : 'Odd';

// Тот же пример с использованием if-else:

let isEven;
if (num % 2 === 0) {
    isEven = 'Even';
} else {
    isEven = 'Odd';
}

// Практические примеры

// Проверка доступности товара:

   let inStock = quantity > 0 ? 'In Stock' : 'Out of Stock';

// Условное применение скидки:

   let discount = isMember ? 0.1 : 0.05;

// Выбор темы интерфейса:

   let theme = userPreference === 'dark' ? 'dark-mode' : 'light-mode';

// Тернарный оператор - мощный инструмент для краткого написания условий в JavaScript.
// Он позволяет улучшить читаемость и компактность кода, если использовать его
// разумно. Тем не менее, важно не злоупотреблять этим оператором, чтобы не ухудшить
// читаемость кода. В сложных условиях лучше использовать более явные конструкции if-else.
