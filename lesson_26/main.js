// Пример кода для демонстрации приоритета операторов в JavaScript

// Выражение, включающее несколько операторов
let result = 5 + 3 * 2 ** 2 / 4 - 1; // Ожидаемое значение: 8

// Выводим результат в консоль
console.log("Result is: " + result);

/*
Подробное объяснение

1. Определение приоритета операторов:
   - Приоритет операторов определяет порядок, в котором выполняются операции в выражении.
   - Операторы с более высоким приоритетом выполняются раньше операторов с более низким приоритетом.

2. Таблица приоритета операторов (высокий -> низкий):
   1. Группировка: ()
   2. Оператор инкремента и декремента: ++, --
   3. Арифметические операторы: ** (возведение в степень)
   4. Арифметические операторы: *, /, %
   5. Арифметические операторы: +, -

3. Пошаговый разбор выражения `5 + 3 * 2 ** 2 / 4 - 1`:
   - Возведение в степень: 2 ** 2 -> 4
   - Умножение: 3 * 4 -> 12
   - Деление: 12 / 4 -> 3
   - Сложение: 5 + 3 -> 8
   - Вычитание: 8 - 1 -> 7

   В результате, выражение `5 + 3 * 2 ** 2 / 4 - 1` вычисляется как 7.

4. Использование скобок для изменения приоритета:
   - Скобки () используются для явного указания порядка выполнения операций.
   - Выражение `(5 + 3) * (2 ** (2 / 4)) - 1` будет вычисляться по-другому.

   Пример:
   let resultWithParentheses = (5 + 3) * (2 ** (2 / 4)) - 1;
   console.log("Result with parentheses is: " + resultWithParentheses);

   В данном примере, приоритет операторов изменяется за счет использования скобок.

Исключения и особенности:
- Операторы с одинаковым приоритетом выполняются слева направо (ассоциативность слева), за исключением операторов возведения в степень, которые выполняются справа налево (ассоциативность справа).
- Логические операторы (&&, ||) имеют более низкий приоритет, чем арифметические операторы, но более высокий, чем операторы присваивания (=).

Архитектура:
- Понимание приоритета операторов важно для написания корректного кода и избежания логических ошибок.
- Явное использование скобок делает код более читаемым и понятным, что способствует поддерживаемости и снижению числа ошибок.

Пример:

let a = 5, b = 10, c = 15;
let resultExample = a + b * c / (a + b) - c;
console.log("Complex expression result: " + resultExample);

В этом примере скобки помогают явно указать порядок выполнения операций, что упрощает понимание выражения.
*/
