// Пример кода с соблюдением стиля написания в JavaScript

// 1. Объявление переменных
// Используйте let или const вместо var
const MAX_COUNT = 10; // Константы пишутся в верхнем регистре
let counter = 0;      // Переменные пишутся в camelCase

// 2. Функции
// Именование функций также следует camelCase
function incrementCounter(value) {
    // Добавление значения к счетчику
    return counter += value;
}

// Функции могут быть объявлены как стрелочные функции, если это уместно
const logCounter = () => {
    console.log(`Counter is: ${counter}`);
}

// 3. Условные операторы
// Используйте строгие сравнения === и !== вместо == и !=
if (counter < MAX_COUNT) {
    incrementCounter(1);
    logCounter();
} else {
    console.log("Counter has reached its maximum value.");
}

// 4. Циклы
// Используйте for, while или forEach для итераций
for (let i = 0; i < MAX_COUNT; i++) {
    incrementCounter(1);
    logCounter();
}

// 5. Объекты и массивы
// Стиль объявления объектов и массивов
const user = {
    name: "John",
    age: 30,
    isActive: true
};

const users = ["Alice", "Bob", "Charlie"];

// 6. Комментарии
// Однострочные комментарии начинаются с двух слешей
/*
Многострочные комментарии пишутся между слеш-звездочка и звездочка-слеш.
Они полезны для более подробных объяснений.
*/

/*
Рекомендации по стилю написания кода

1. Именование переменных и функций:
   - Используйте понятные и осмысленные имена.
   - Переменные и функции пишутся в camelCase.
   - Константы пишутся в UPPER_SNAKE_CASE.

2. Отступы и форматирование:
   - Используйте отступы в 2 или 4 пробела, чтобы сделать код читаемым.
   - Старайтесь, чтобы длина строки не превышала 80-100 символов.

3. Использование const и let:
   - Используйте const для переменных, значения которых не изменяются.
   - Используйте let для переменных, значения которых могут изменяться.
   - Избегайте использования var.

4. Строгие сравнения:
   - Используйте === и !== для сравнения, чтобы избежать проблем с приведением типов.

5. Стрелочные функции:
   - Используйте стрелочные функции для краткости, особенно для анонимных функций.

6. Комментарии:
   - Пишите комментарии для пояснения сложных участков кода.
   - Используйте однострочные комментарии для кратких пояснений.
   - Используйте многострочные комментарии для более подробных объяснений и документации.

7. Управляющие структуры:
   - Избегайте глубокой вложенности.
   - Используйте guard clauses для проверки условий в начале функции.

8. Модули:
   - Разделяйте код на модули для улучшения организованности и повторного использования.
   - Экспортируйте и импортируйте функции и переменные из модулей.

9. Обработка ошибок:
   - Всегда обрабатывайте ошибки с помощью try/catch.
   - Логируйте ошибки для последующего анализа и исправления.

Пример использования try/catch:

try {
    // Код, который может вызвать ошибку
    const result = someFunction();
    console.log(result);
} catch (error) {
    console.error("An error occurred:", error);
}

Следование этим рекомендациям помогает поддерживать код чистым, читаемым и поддерживаемым.
*/