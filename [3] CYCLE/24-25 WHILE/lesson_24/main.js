// Объявляем начальное значение счетчика
let counter = 0;

// Цикл while будет выполняться до тех пор, пока значение counter меньше 5
while (counter < 5) {
    // Выводим текущее значение counter в консоль
    console.log("Counter is: " + counter);

    // Увеличиваем значение counter на 1
    counter++;
}

// После выполнения цикла выводим сообщение о завершении
console.log("Loop is done.");

/*
Подробное объяснение

1. Инициализация переменной `counter`:
   - Мы объявляем переменную `counter` и присваиваем ей начальное значение `0`.
   - Эта переменная будет использоваться для контроля числа итераций цикла.

let counter = 0;

2. Условие цикла `while`:
   - Цикл `while` проверяет условие перед каждой итерацией. В данном случае, он будет выполняться до тех пор, пока значение переменной `counter` меньше `5`.
   - Если условие ложно с самого начала, код внутри цикла не выполнится ни разу.

while (counter < 5) {

3. Тело цикла:
   - В теле цикла выполняются команды, которые необходимо повторять.
   - Здесь мы выводим текущее значение переменной `counter` в консоль.

console.log("Counter is: " + counter);

4. Инкремент переменной `counter`:
   - После каждой итерации мы увеличиваем значение переменной `counter` на `1`.
   - Это важно для предотвращения бесконечного цикла. Без инкремента значение `counter` всегда будет `0`, и условие `while (counter < 5)` всегда будет истинным.

counter++;

5. Завершение цикла:
   - Когда значение переменной `counter` достигнет `5`, условие `while (counter < 5)` станет ложным, и выполнение цикла прекратится.
   - После завершения цикла выполняется следующая команда, которая выводит сообщение о завершении.

console.log("Loop is done.");

Общее описание:
- Цикл `while` является одним из основных способов организации повторяющихся действий в JavaScript.
- Он проверяет условие перед каждой итерацией и продолжает выполнение, пока условие истинно.

Как это работает:
- Вначале проверяется условие. Если оно истинно, выполняется тело цикла.
- После выполнения тела цикла проверяется условие снова.
- Процесс продолжается до тех пор, пока условие остается истинным.

Исключения и особенности:
- Бесконечный цикл: Если условие всегда истинно, цикл никогда не завершится. Например, если забыть инкрементировать `counter`, условие `counter < 5` будет всегда истинно, что приведет к бесконечному циклу.
- Прерывание цикла: Цикл `while` можно прервать с помощью оператора `break`. Это полезно для выхода из цикла при наступлении какого-либо события, например, при ошибке или нахождении нужного значения.
- Пропуск итерации: Оператор `continue` можно использовать для пропуска текущей итерации и перехода к следующей.

Архитектура:
- Использование цикла `while` следует обдумывать в контексте общей архитектуры программы.
- Например, если известно, сколько раз нужно выполнить цикл, предпочтительнее использовать цикл `for`.
- Циклы `while` полезны, когда количество итераций неизвестно заранее и зависит от динамических условий.

Пример бесконечного цикла:

let i = 0;
while (true) {
    if (i > 10) break;
    console.log(i);
    i++;
}

Этот код демонстрирует использование `break` для выхода из бесконечного цикла при достижении определенного условия.
*/
