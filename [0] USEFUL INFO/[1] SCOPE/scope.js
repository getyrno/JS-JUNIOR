// Глобальная переменная
var globalVar = 'I am global';

// Глобальные переменные доступны из любого места в коде
// Функция, демонстрирующая локальную область видимости функции
function testFunction() {
    // Локальная переменная функции
    var localVar = 'I am local';

    console.log(globalVar); // Доступ к глобальной переменной внутри функции. Вывод: 'I am global'
    console.log(localVar);  // Доступ к локальной переменной внутри функции. Вывод: 'I am local'
}

testFunction();

console.log(globalVar); // Доступ к глобальной переменной в глобальной области. Вывод: 'I am global'
console.log(localVar);  // Ошибка: localVar is not defined, т.к. localVar недоступна вне функции

// Блок кода, демонстрирующий блочную область видимости
{
    // Локальная переменная блочной области видимости
    let blockVar = 'I am block-scoped';
    console.log(blockVar); // Доступ к переменной внутри блока. Вывод: 'I am block-scoped'
}

console.log(blockVar); // Ошибка: blockVar is not defined, т.к. blockVar недоступна вне блока

// Архитектура области видимости в JavaScript:

// 1. Глобальная область видимости:
//    - Переменные, объявленные вне функций и блоков, имеют глобальную область видимости.
//    - Глобальные переменные доступны из любой части программы.
//    - В браузере глобальные переменные становятся свойствами объекта window.

// 2. Локальная область видимости функции:
//    - Переменные, объявленные внутри функции с помощью var, имеют локальную область видимости этой функции.
//    - Такие переменные недоступны за пределами функции.

// 3. Блочная область видимости:
//    - Переменные, объявленные внутри блока с помощью let или const, имеют блочную область видимости.
//    - Такие переменные недоступны за пределами блока, в котором они объявлены.
//    - Блоки кода включают конструкции if, for, while, функции и просто фигурные скобки {}.

// Дополнительно:

// 1. Переменные, объявленные с помощью var, имеют функциональную область видимости, а не блочную.
// 2. Переменные, объявленные с помощью let и const, имеют блочную область видимости.
// 3. В глобальной области видимости переменные, объявленные с помощью var, становятся свойствами глобального объекта (window в браузере).
// 4. Использование глобальных переменных может привести к конфликтам имен и трудностям в отладке, поэтому рекомендуется минимизировать их использование.
// 5. Функции, объявленные в глобальной области, также имеют глобальную область видимости и могут быть вызваны из любого места в коде.
// 6. В строгом режиме ('use strict') использование необъявленных переменных вызывает ошибку. Это помогает предотвратить случайное создание глобальных переменных.
// 7. Переменные, объявленные с помощью const, не могут быть переприсвоены, но их содержимое (например, объекты или массивы) может изменяться.

