/**
 * Полное руководство по функциям для Junior JS Developer
 *
 * Глава: Основы функций
 * Подглава: Параметры и аргументы
 */

/**
 * Введение
 *
 * Параметры и аргументы играют ключевую роль в функциях JavaScript, позволяя передавать
 * данные в функции и использовать их внутри функции. В этой главе мы рассмотрим, как
 * параметры и аргументы работают в JavaScript.
 */

/**
 * Параметры функции
 *
 * Параметры функции объявляются при её определении и действуют как переменные внутри
 * функции, которые принимают значения аргументов при вызове функции.
 *
 * Пример:
 */
function greet(name) {
    console.log('Привет, ' + name + '!');
}

// Вызов функции с аргументом
greet('Алиса'); // Вывод: Привет, Алиса!

/**
 * Аргументы функции
 *
 * Аргументы передаются при вызове функции и представляют значения, которые
 * передаются параметрам функции.
 *
 * Пример:
 */
function add(a, b) {
    return a + b;
}

// Вызов функции с двумя аргументами
console.log(add(2, 3)); // Вывод: 5

/**
 * Параметры по умолчанию
 *
 * Вы можете задать значения по умолчанию для параметров функции. Эти значения будут
 * использоваться, если аргументы не были переданы при вызове функции.
 *
 * Пример:
 */
function greetWithDefault(name = 'гость') {
    console.log('Привет, ' + name + '!');
}

// Вызов функции без аргумента
greetWithDefault(); // Вывод: Привет, гость!

// Вызов функции с аргументом
greetWithDefault('Алиса'); // Вывод: Привет, Алиса!

/**
 * Остаточные параметры (Rest Parameters)
 *
 * Остаточные параметры позволяют функции принимать переменное количество аргументов,
 * которые собираются в массив.
 *
 * Пример:
 */
function sum(...numbers) {
    return numbers.reduce((acc, curr) => acc + curr, 0);
}

// Вызов функции с несколькими аргументами
console.log(sum(1, 2, 3, 4)); // Вывод: 10

/**
 * Аргументы объекта (Arguments Object)
 *
 * `arguments` - это встроенный объект, доступный внутри всех функций, который содержит
 * все аргументы, переданные в функцию. Он не является массивом, но может быть преобразован
 * в массив.
 *
 * Пример:
 */
function showArguments() {
    for (let i = 0; i < arguments.length; i++) {
        console.log(arguments[i]);
    }
}

// Вызов функции с несколькими аргументами
showArguments('один', 'два', 'три');
// Вывод:
// один
// два
// три

/**
 * Деструктуризация параметров
 *
 * Деструктуризация позволяет извлекать значения из массивов или объектов и
 * присваивать их переменным.
 *
 * Пример с массивом:
 */
function printCoordinates([x, y]) {
    console.log('Координаты: x = ' + x + ', y = ' + y);
}

printCoordinates([10, 20]); // Вывод: Координаты: x = 10, y = 20

/**
 * Пример с объектом:
 */
function printPerson({ name, age }) {
    console.log('Имя: ' + name + ', возраст: ' + age);
}

printPerson({ name: 'Алиса', age: 25 }); // Вывод: Имя: Алиса, возраст: 25

/**
 * Заключение
 *
 * Параметры и аргументы позволяют функциям быть гибкими и многоразовыми. Понимание
 * различных способов передачи и использования параметров и аргументов помогает
 * создавать более мощные и адаптируемые функции.
 */

