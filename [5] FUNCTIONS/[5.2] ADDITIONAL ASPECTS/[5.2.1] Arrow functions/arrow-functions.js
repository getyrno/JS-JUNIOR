/**
 * Полное руководство по функциям для Junior JS Developer
 *
 * Глава: Дополнительные аспекты
 * Подглава: Стрелочные функции
 */

/**
 * Введение
 *
 * Стрелочные функции (Arrow Functions) были введены в ECMAScript 6 (ES6) и предоставляют
 * более краткий синтаксис для написания функций. Помимо синтаксиса, у стрелочных функций
 * есть несколько отличий от обычных функций, которые делают их удобными для определенных
 * задач.
 */

/**
 * Синтаксис стрелочных функций
 *
 * Стрелочные функции имеют более краткий синтаксис по сравнению с обычными функциями.
 * Они не используют ключевое слово `function`, и вместо этого используют "стрелку" `=>`.
 *
 * Пример:
 */
const add = (a, b) => {
    return a + b;
};

console.log(add(2, 3)); // Вывод: 5

/**
 * Упрощенный синтаксис
 *
 * Если тело функции состоит из одного выражения, можно опустить фигурные скобки `{}` и
 * ключевое слово `return`.
 *
 * Пример:
 */
const subtract = (a, b) => a - b;

console.log(subtract(5, 3)); // Вывод: 2

/**
 * Стрелочные функции без параметров
 *
 * Если функция не принимает параметры, используются пустые круглые скобки `()`.
 *
 * Пример:
 */
const sayHello = () => {
    console.log('Привет!');
};

sayHello(); // Вывод: Привет!

/**
 * Стрелочные функции с одним параметром
 *
 * Если функция принимает один параметр, круглые скобки можно опустить.
 *
 * Пример:
 */
const square = x => x * x;

console.log(square(4)); // Вывод: 16

/**
 * Лексическое значение this
 *
 * Одной из наиболее важных особенностей стрелочных функций является то, что они не имеют
 * своего собственного значения `this`. Вместо этого `this` определяется лексически, то есть
 * стрелочные функции используют значение `this` из окружающего контекста.
 *
 * Пример:
 */
const user = {
    name: 'Алиса',
    greet: function() {
        setTimeout(() => {
            console.log('Привет, ' + this.name + '!');
        }, 1000);
    }
};

user.greet(); // Вывод: Привет, Алиса!

/**
 * Отсутствие arguments
 *
 * Стрелочные функции не имеют своего собственного объекта `arguments`. Если необходимо
 * использовать `arguments`, следует использовать обычные функции.
 *
 * Пример:
 */
const showArguments = () => {
    try {
        console.log(arguments);
    } catch (error) {
        console.log('Стрелочные функции не имеют объекта arguments');
    }
};

showArguments(1, 2, 3); // Вывод: Стрелочные функции не имеют объекта arguments

/**
 * Использование стрелочных функций в методах массивов
 *
 * Стрелочные функции часто используются в методах массивов, таких как `map`, `filter` и `reduce`,
 * благодаря своему краткому синтаксису.
 *
 * Пример:
 */
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(num => num * 2);

console.log(doubled); // Вывод: [2, 4, 6, 8, 10]

/**
 * Заключение
 *
 * Стрелочные функции предоставляют удобный и краткий синтаксис для написания функций в JavaScript.
 * Их особенности, такие как лексическое значение `this` и отсутствие собственного объекта `arguments`,
 * делают их полезными для использования в определенных сценариях. Понимание этих особенностей поможет
 * вам эффективно использовать стрелочные функции в вашем коде.
 */

