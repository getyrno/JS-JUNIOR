/**
 * Полное руководство по функциям для Junior JS Developer
 *
 * Глава: Дополнительные аспекты
 * Подглава: Анонимные функции
 */

/**
 * Введение
 *
 * Анонимные функции – это функции, которые не имеют имени. Они часто используются там,
 * где функция нужна один раз или передается как аргумент другой функции. Анонимные функции
 * могут быть как обычными, так и стрелочными.
 */

/**
 * Создание анонимных функций
 *
 * Анонимные функции могут быть присвоены переменной или использованы как аргументы других функций.
 *
 * Пример:
 */
const greet = function(name) {
    console.log('Привет, ' + name + '!');
};

greet('Алиса'); // Вывод: Привет, Алиса!

/**
 * Анонимные функции как аргументы других функций
 *
 * Анонимные функции часто используются как аргументы для других функций, таких как методы массивов
 * или обработчики событий.
 *
 * Пример:
 */
setTimeout(function() {
    console.log('Время вышло!');
}, 1000);

const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(function(num) {
    return num * 2;
});

console.log(doubled); // Вывод: [2, 4, 6, 8, 10]

/**
 * Анонимные стрелочные функции
 *
 * Стрелочные функции также могут быть анонимными и часто используются там же, где и обычные анонимные функции.
 *
 * Пример:
 */
const squared = numbers.map(num => num * num);
console.log(squared); // Вывод: [1, 4, 9, 16, 25]

/**
 * Немедленно вызываемые функциональные выражения (IIFE)
 *
 * Анонимные функции часто используются для создания немедленно вызываемых функциональных выражений,
 * которые выполняются сразу после их создания. Это полезно для создания изолированной области видимости.
 *
 * Пример:
 */
(function() {
    console.log('Это IIFE!');
})();

/**
 * Анонимные функции в обработчиках событий
 *
 * Анонимные функции широко используются в обработчиках событий для работы с DOM.
 *
 * Пример:
 */
document.getElementById('myButton').addEventListener('click', function() {
    alert('Кнопка нажата!');
});

/**
 * Анонимные функции в качестве замыканий
 *
 * Анонимные функции могут быть использованы для создания замыканий, которые сохраняют доступ
 * к переменным из внешней области видимости.
 *
 * Пример:
 */
function createCounter() {
    let count = 0;
    return function() {
        count += 1;
        return count;
    };
}

const counter = createCounter();
console.log(counter()); // Вывод: 1
console.log(counter()); // Вывод: 2

/**
 * Заключение
 *
 * Анонимные функции являются важным инструментом в JavaScript, позволяя создавать гибкие и
 * мощные конструкции кода. Их можно использовать в различных сценариях, таких как аргументы
 * функций, обработчики событий и замыкания, что делает их неотъемлемой частью языка.
 */