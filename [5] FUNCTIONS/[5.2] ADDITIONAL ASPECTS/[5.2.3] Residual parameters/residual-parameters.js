/**
 * Полное руководство по функциям для Junior JS Developer
 *
 * Глава: Дополнительные аспекты
 * Подглава: Остаточные параметры
 */

/**
 * Введение
 *
 * Остаточные параметры (Rest Parameters) позволяют функции принимать произвольное количество аргументов,
 * которые объединяются в массив. Это полезно, когда количество аргументов неизвестно заранее или когда
 * функция должна обрабатывать большое количество параметров.
 */

/**
 * Основы остаточных параметров
 *
 * Остаточные параметры объявляются с использованием синтаксиса троеточия (`...`), за которым следует имя массива.
 * Эти параметры должны быть последними в списке параметров функции.
 *
 * Пример:
 */
function sum(...numbers) {
    return numbers.reduce((acc, curr) => acc + curr, 0);
}

console.log(sum(1, 2, 3)); // Вывод: 6
console.log(sum(4, 5, 6, 7)); // Вывод: 22

/**
 * Использование остаточных параметров с обычными параметрами
 *
 * Остаточные параметры могут сочетаться с обычными параметрами. Обычные параметры должны идти перед остаточными.
 *
 * Пример:
 */
function multiply(multiplier, ...numbers) {
    return numbers.map(num => num * multiplier);
}

console.log(multiply(2, 1, 2, 3)); // Вывод: [2, 4, 6]

/**
 * Остаточные параметры и объект arguments
 *
 * Остаточные параметры предоставляют более удобный способ работы с произвольным количеством аргументов
 * по сравнению с объектом `arguments`. В отличие от `arguments`, остаточные параметры являются массивом
 * и поддерживают все методы массива.
 *
 * Пример:
 */
function showArguments(...args) {
    args.forEach(arg => console.log(arg));
}

showArguments('один', 'два', 'три');
// Вывод:
// один
// два
// три

/**
 * Остаточные параметры и деструктуризация
 *
 * Остаточные параметры можно использовать вместе с деструктуризацией для извлечения данных.
 *
 * Пример:
 */
function introduce(name, age, ...hobbies) {
    console.log(`Имя: ${name}, возраст: ${age}`);
    console.log(`Хобби: ${hobbies.join(', ')}`);
}

introduce('Алиса', 25, 'чтение', 'путешествия', 'спорт');
// Вывод:
// Имя: Алиса, возраст: 25
// Хобби: чтение, путешествия, спорт

/**
 * Порядок параметров
 *
 * Остаточные параметры должны быть последними в списке параметров функции. Параметры, указанные после
 * остаточных параметров, вызовут ошибку.
 *
 * Пример:
 */
try {
    function incorrect(...args, last) {
        console.log(args);
    }
} catch (error) {
    console.log('Ошибка: остаточные параметры должны быть последними');
}
// Вывод: Ошибка: остаточные параметры должны быть последними

/**
 * Заключение
 *
 * Остаточные параметры упрощают работу с функциями, которым нужно обрабатывать переменное количество аргументов.
 * Они обеспечивают гибкость и удобство, позволяя легко использовать массивы аргументов внутри функции.
 */